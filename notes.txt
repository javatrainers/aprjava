GIT : central code repository. to share/ merge/ download
programs between the developers in the team

BRAIN
	INFO - RED SIGNAL
	
	ACTION
		instruction = slow down and stop the car

COMPUTER = cell/tablet/laptop/desktop
	INFORMATION (MEMORY)
	
	ACTION / PROCESS INSTRUCTIONS (CPU)

PROGRAM - BANKACCOUNT
	BALANCE/MONEY=1000 (INFORMATION STORAGE)
	
	ACTION
		WITHDRAW=200 (ACTIONS)
			instructions= deduct withdraw amount from BALANCE (INSTRUCTION algorithm to complete the task)
			BALANCE=800
		
		DEPOSIT=100
			instructions= add deposit amount to the balance
			balance=900
			
NATIVE APPLICATION :
	sticky / heavy weight software
	downloaded/installed consume
				
WEB APPLICATION
	light weight software : can be used with web browser software
	
	
src - source code = english/french = .java
bin - binary code = machine language = .class


Programming Concept
	Procedure oriented programming = task oriented (machine programming )
		FLY ROCKET
		
	Object oriented programming = real life approach
	modular approach = breakdown big problem into small manageable unit
		ROCKET
			has
				cockpit = life support 
				fuel tank = store the fuel
				combustion = burn the fuel
				exhaustion = exhuaust gas,flames downward angel. propels rocket upwards
			
			
			Does
			
	Object
		has = things/attributes that the object is made of
		does = actions associated with this object
			
			
Bank :
	money, customer name, account number, withdraw,deposit, transfer, routing number
	has : money, customername, accountNumber, routing number
	Does : withdraw, deposit,transfer

Bank has money
Bank does money


Rock
	has - color, weight, mineral composition
	does - throw, paperweight



			
Bank :
	money, customer name, account number, withdraw,deposit, transfer, routing number
	has : money, customername, accountNumber, routing number
	Does : withdraw, deposit,transfer


Bank Program
	has-a/ information storage***********
		money=1000
		name=john
		acctNumber=123456
		routing number=000111222
		
	does/action ***************
		withdraw = 100
			money deducts = 1000 - 100 = 900 LOGIC****************
		
		deposit = 200
			money adds = 1000 + 200 =1200
		
		
		
POJO = Plain old java object

CLASS program types
native application = java program designed to run locally on a device
Servlets = java programs designed for web/internet application

Amazon
	has - products (Variables) vary = changes
	does - buy, sell (Methods)
		buy
			how to buy - (Logic/algorithm = Control flows)
			charge the customer
			deduct stock
		how to sell

has : store information
does : change information
	logic/agorithm // how to change information
	
	
BankProgram
	has : ssn=1231231 balance=100, address=ny, phone=123 (Store information)
	does :
		withdraw (change info)(action)
			deduct withdraw amount from balance (how to change info)(logic)
		depsit
			add deposit amount to the balance
		updateAddress
			change address from ny to ca
			
			
Blue print : design on piece of paper (reference)
Real instance: real materialistic/physical house/car built based upon the blue print design

Class : digital blue print of a software system
Object : digital data built upon a software blue print

BLUE PRINT of facebook customer
Facebook customer class
	status
	name
	friends
	chats
	picture


Iphone = 2006
	call
	text
	browse
	
	
Iphone4 inherit Iphone = 2008
	call (inherit / reuse)
	text (inherit / reuse) 
	browse (inherit / reuse)
	maps
	
	
	
capsule = tablet
	medicine = chemcial/ingrdeients
	
encapsulation	



languages are Sticky ( depended on the device/os it runs on )


Person
	has = store information ( VARIABLES )
		name
		phone
		address
		
Apple
	has
		iphoneStock=1100
		IphonePrice= 1099

BankAccount
	has
		balance=500
	
	




Bank Program
	has-a/ information storage*********** VARIABLES
		balance/money=1000
		name=john
		acctNumber=123456
		routing number=00.0111222
		accountActive=false
		
	does/action *************** METHODS
		withdraw = 100
			money deducts = 1000 - 100 = 900 LOGIC**************** CONTROL FLOWS/OPERATORS
		
		deposit = 200
			money adds = 1000 + 200 =1200
			
		
VARIABLE (HAS-A): STORE INFORMATION

METHODS (DOES-A): CHANGING INFORMATION
		
		
		
		
Variables
	Simple/primitive information = represented with simple/primitive value
		age=55 ( smallest unit of information)
		weight=120.6
	
	Complex information
		address= 
			street, building, city,state,zip,country


	simple/primitive data (Primitive data type)
		numeric = byte, short, int ,  long
			age, zip, stock, quantity
		alphabetic = char
			single character
		fractional = float, double
			weight, height			
		yes/no = boolean (true/false)
			loggedin status, account status,
		
	complex information (Object data type)
		group of characters = String
			name, city, state, country, product name
		Object complex data type
"NAME" ???
String name;
what attribute/variable names are
what are the data type of each variables

Business requirement discussion	(BRD call)	
Person
	has = store information ( VARIABLES )
		name
		phone
		age
		weight

CamelCase = First letter is capital case, and remaining letter is lower case
public class Person{ // opening curly bracket
	


}// closing curly bracket
Data structure

HOW TO BEGIN WRITING PROGRAM
HAS-A (BRD CALLS) INTO PROGRAM
WHAT ARE THEY TYPE OF DATA
WHEN TO CHOOSE AMONG DIFFERENT NUMERIC DATA TYPE
	HOW THEY ARE STORED IN THE MEMORY
	