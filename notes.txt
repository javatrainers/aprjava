GIT : central code repository. to share/ merge/ download
programs between the developers in the team

BRAIN
	INFO - RED SIGNAL
	
	ACTION
		instruction = slow down and stop the car

COMPUTER = cell/tablet/laptop/desktop
	INFORMATION (MEMORY)
	
	ACTION / PROCESS INSTRUCTIONS (CPU)

PROGRAM - BANKACCOUNT
	BALANCE/MONEY=1000 (INFORMATION STORAGE)
	
	ACTION
		WITHDRAW=200 (ACTIONS)
			instructions= deduct withdraw amount from BALANCE (INSTRUCTION algorithm to complete the task)
			BALANCE=800
		
		DEPOSIT=100
			instructions= add deposit amount to the balance
			balance=900
			
NATIVE APPLICATION :
	sticky / heavy weight software
	downloaded/installed consume
				
WEB APPLICATION
	light weight software : can be used with web browser software
	
	
src - source code = english/french = .java
bin - binary code = machine language = .class


Programming Concept
	Procedure oriented programming = task oriented (machine programming )
		FLY ROCKET
		
	Object oriented programming = real life approach
	modular approach = breakdown big problem into small manageable unit
		ROCKET
			has
				cockpit = life support 
				fuel tank = store the fuel
				combustion = burn the fuel
				exhaustion = exhuaust gas,flames downward angel. propels rocket upwards
			
			
			Does
			
	Object
		has = things/attributes that the object is made of
		does = actions associated with this object
			
			
Bank :
	money, customer name, account number, withdraw,deposit, transfer, routing number
	has : money, customername, accountNumber, routing number
	Does : withdraw, deposit,transfer

Bank has money
Bank does money


Rock
	has - color, weight, mineral composition
	does - throw, paperweight



			
Bank :
	money, customer name, account number, withdraw,deposit, transfer, routing number
	has : money, customername, accountNumber, routing number
	Does : withdraw, deposit,transfer


Bank Program
	has-a/ information storage***********
		money=1000
		name=john
		acctNumber=123456
		routing number=000111222
		
	does/action *************** ( reading or changing information AND communication btw programs)
		withdraw = 100
			money deducts = 1000 - 100 = 900 LOGIC****************
		
		deposit = 200
			money adds = 1000 + 200 =1200
		
		
		
POJO = Plain old java object

CLASS program types
native application = java program designed to run locally on a device
Servlets = java programs designed for web/internet application

Amazon
	has - products (Variables) vary = changes
	does - buy, sell (Methods)
		buy
			how to buy - (Logic/algorithm = Control flows)
			charge the customer
			deduct stock
		how to sell

has : store information
does : change information
	logic/agorithm // how to change information
	
	
BankProgram
	has : ssn=1231231 balance=100, address=ny, phone=123 (Store information)
	does :
		withdraw (change info)(action)
			deduct withdraw amount from balance (how to change info)(logic)
		depsit
			add deposit amount to the balance
		updateAddress
			change address from ny to ca
			
			
Blue print : design on piece of paper (reference)
Real instance: real materialistic/physical house/car built based upon the blue print design

Class : digital blue print of a software system
Object : digital data built upon a software blue print

BLUE PRINT of facebook customer
Facebook customer class
	status
	name
	friends
	chats
	picture


Iphone = 2006
	call
	text
	browse
	
	
Iphone4 inherit Iphone = 2008
	call (inherit / reuse)
	text (inherit / reuse) 
	browse (inherit / reuse)
	maps
	
	
	
capsule = tablet
	medicine = chemcial/ingrdeients
	
encapsulation	



languages are Sticky ( depended on the device/os it runs on )


Person
	has = store information ( VARIABLES )
		name
		phone
		address
		
Apple
	has
		iphoneStock=1100
		IphonePrice= 1099

BankAccount
	has
		balance=500
	
	




Bank Program
	has-a/ information storage*********** VARIABLES
		balance/money=1000
		name=john
		acctNumber=123456
		routing number=00.0111222
		accountActive=false
		
	does/action *************** METHODS
		withdraw = 100
			money deducts = 1000 - 100 = 900 LOGIC**************** CONTROL FLOWS/OPERATORS
		
		deposit = 200
			money adds = 1000 + 200 =1200
			
		
VARIABLE (HAS-A): STORE INFORMATION

METHODS (DOES-A): CHANGING INFORMATION
		
		
		
		
Variables
	Simple/primitive information = represented with simple/primitive value
		age=55 ( smallest unit of information)
		weight=120.6
	
	Complex information
		address= 
			street, building, city,state,zip,country


	simple/primitive data (Primitive data type)
		numeric = byte, short, int ,  long
			age, zip, stock, quantity
		alphabetic = char
			single character
		fractional = float, double
			weight, height			
		yes/no = boolean (true/false)
			loggedin status, account status,
		
	complex information (Object data type)
		group of characters = String
			name, city, state, country, product name
		Object complex data type
"NAME" ???
String name;
what attribute/variable names are
what are the data type of each variables

Business requirement discussion	(BRD call)	
Person
	has = store information ( VARIABLES )
		name
		phone
		age
		weight

CamelCase = First letter is capital case, and remaining letter is lower case
public class Person{ // opening curly bracket
	


}// closing curly bracket
Data structure

HOW TO BEGIN WRITING PROGRAM
HAS-A (BRD CALLS) INTO PROGRAM
WHAT ARE THEY TYPE OF DATA
WHEN TO CHOOSE AMONG DIFFERENT NUMERIC DATA TYPE
	HOW THEY ARE STORED IN THE MEMORY
	
	
boolean b;
String a;	
int x; // "declaration" line - announce/declare that x is capable of storing
	// numeric data type
int age=25; // "initialization" - assigning value for the FIRST time, since
		// its declaration
age=26; // 'assignment"/reassignment
	
long balance; // declaration
balance=100;// initialization
balance=80; // assignment
balance=150; // reassignment

String name=123;
// String is data type
// name is a variable
// naming convention of variable is camelcase
// variable name is allowed because it is not a reserved key word
// 123 is value
// name is variable declared as data type String
// this is also a initialization line
// String is data type that allows to store group of character
// however value happens to be numeric
// String is not capable of storing numeric value



Variable = changes(vary)	
	values keep changing.
	
	
	
	
RULES on how to use variables


= assignment operator

int a=10;
LHS ( left hand side of equal sign)  int a
RHS ( right hand side of equal sign) 10

LHS should always be a variable
RHS can be a value or another matching variable

1) LHS & RHS data type should match
2) LHS can be variable only
RHS can be value or a variable
	if RHS is a variable.. substitute RHS variable to its value
		
int a=20; // a is 20 in memory
int b=a; // int b=20..... b is 20 in memory
String c="john"; // c is john in memory
a=b; // RHS is variable. substitute value of b on RHS
	// a=20... a is overwritten with same 20 value in memory
b=a; // RHS is variable. substitute value of a on RHS
	// b=20... b is overwritten with same 20 value in memory 
a=30; // a is overwritten with new value 30 in memory
sysout(a); 30
sysout(b); 20
sysout(c); john
	

*********** METHODS
	just like variables store information. 
	METHOD ARE RESPONSIBLE FOR READING/CHANGING INFORMATION
			AND
	PROGRAM COMMUNICATION
************

Exchnage of information

CUSTOMER
	what  is the price of "IPHONE" (input)

SHOP OWNER
	the price is "1000$" (output)

calculate area of recatnagle
public int areaOfReccet( int length, int breadth)
	
input is provided by your customers
output is given back by the program
********* Method Declaration	*********
	
		how to recognize methods : Does-A exercise
		how to code methods :
			What to name this activity ???  login
			how many inputs are required ??? what are the data type of each inputs ???   2 inputs, String userid and String password
			how many outputs are required ??? what is the data type of each output ???   1 output.. boolean
				
		PUBLIC 	OUTPUT 	NAME	(INPUT)
			
		NAME : similar rules as variables
			Follow camelCase format in method names
			Alphabets , numbers, $, _ allowed in method names (cannot start with number)
			area_Of_Rectangle123
	
		OUTPUT : CAN ALWAYS BE 0 or 1 (is mandatory, it has to be just 1.)
			0 = void  ... 
				public  void   hello(String message)
			1 = appropriate data type, int/boolean... 
				public int add(int a, int b)
			more than 1 = complex or multiple infor to return, create a new program. 
				provide data type as the name of the program
				
		INPUT : CAN BE 0 , 1 or MORE  ( is optional )
			0 = if no input require, leave it empty
				public int bye(  )
			1 = if 1 input, write data type and name of the input
				public profile displayProfile(String userid)
			More = if more than 1 input , separated by comma. data type followed by the name
				public boolean login(String userid, string pwd)
******************************************				
	public	int		calculateCircle 	(int radius)
	public	long		multiply( int number1, int number2)
	public	boolean	login(String userid, String password)
	public 	void		greet(String message)		
				
				public int add(int number1, int number2)

				display entire profile of a user (status,friends, chats,posts, address, phone)
				public Profile display(String userid)
				
				public class Profile{
					String status,
					String friends, 
					String chats,
					String posts, 
					addr address, 
					long phone
				}


PROGRAM COMMUNICATION HAPPENS THROUGH METHOD CALL
	Caller program - passes input (informatino PASSES from caller to callee)
	Callee program - returns output(informatino PASSES from callee to caller)

Method call = transfers control from caller program to callee program

********* RULES (callee/service provider program) on return statement *********

if the output/return type is primitive or simple
	any variable of same type or any value of same data type can be returned
if the output/return type is complex/object/reference data type
	any variable of same type or null value can be returned.
	
********* RULES (caller/service consumer program) on passing input to method  ********
		
		 	1) number of input should match - 3 input passed
		 	2) data type of input should match - 2 integers and 1 string
		 	3) order of input should match
		public int add(int num1,int num2,String c) 
		
		add(10,20,"john");

********* RULES (caller/service consumer program)  on handling the return type ******

			4) return type of callee program should match LHS variable in the caller program



IS JAVA PASS BY VALUE OR PASS BY REFERENCE
	how method call works ?
	
	ALWAYS PASS BY VALUE



************** Variable Scope *************
Variables = Store/hold information

Person
	(Long term memory)
		Instance variable = Information About you (personal) 
			DNA , fingerprints, name,age, lastname, date of birth
		Class variable = Information About you ( share with thing/speicies like you)
			hobbies,human,breathe
	(Short term memory)
		Parameter variable = Information in the form of Input
		local variable = temp or local information
		
		Input from customer = 10 + 5 + 2 + 4 (parameteric variable)
			10 + 5 = 15(local variable)
			15 + 2 = 17
			17 + 4 = 21



************** operators ****************

statement : declaration, initialization, method call
	
equal sign = assignment operator

	= sign ( assignment operator)
	ALWAYS PROCESS RHS FIRST
	LHS IS ALWAYS A VARIABLE
	RHS can be literal value, variable, method call, expression, new operator etc
	If RHS has a variable... always substitute RHS variable with its latest value
		then further proceed with processing.
	
	*************************POSSIBLE VALUES ON RHS*****************
	int a=10; // RHS literal direct value. Value is stored in a
	
	int b=a; // RHS can be variable. Value of RHS is substitued. that value gets stored in a variable
	// int b=10;
	********* value of a gets stored in LHS variable*******
	
	int c=add(a,25); // method call.. control goes to method add. add method result returned will be then stored in a variable
	// int c=add(10,25); 
	// int c=35;
	***** returned value of method call gets stored in LHS variable ********
	
	int d=a+50; // expression or operator.. solve the expression firt and store result of expression
	//int d=10+50; int d=60;
	***** result of expression gets stored in LHS variable ********
	
	Person p=new Person(); // new operator
	// new = allocate/reserver memory address
	// Person() = construct digital Person in the above allocated address
	// design or blue print on how to construct Person in memory is written in "class Person"
		*****address where Person is created will be stored in LHS variable****
	***********************************************************

int a=30;
int b=15;
add( a, b ); // add(30,15)
int x=20; // int x=20;
int y = x; // int y=20;
int z=x; // int z=20;
y=z; // y=20;
int p=x+y; // int p=20 + 20;
Person per=new Person( x, y );// Person per=new Person(20,20);

1) know what are variables in each line
2) WHEN NOT TO REPLACE VALUES = if variable on LHS



public class calculator{
	public int add(int a, int b){
		int sum=a+b;
		return sum;
	}
}

method = gateway to access/use our software
	1) there is method avaialble = guarantees that customers can use my s/w
	2) HOW will customer use this method ?
		method declaration provides this info
		public int add(int a, int b)
		customer have to provide 2 integer input(numbers)
		customers can expect to recieve result in the form of number



everytime we encounter method call.. the control transfers to method declaration line

************ WHAT IS METHOD DECLARATION AND CALL ******************
Method declaration and method call
method call = input does not have data type mentioned
method declaration = output is mandatory. input
	has data types mentioned

void abc(int a)// method declaration
public int sub(int a, int b) // method declaration
(a,b); // method call
int areaOfSquare(int side) // method declaration
p.areaOfTriangle( 12 );// method call
void hello() // method declaration
bye(); // method call
int result = div(10,20); // method call
int mul(int a, int b); // method declaration
int price=amazon.getProductPrice("iphone"); // method call
public address getRestaurant(string restName) // method declaration

method declaration
	if there is void in line
	if there is data type mentiond in input section
method call	
	if there is equal sign	
	
	
	
************* operators ***************

int a; // declaration statement
a=10; // initialization statement
a=20;// assignment statement

int sum= add(10,20);

RHS = process to a single value

variable = value .... assignment.... RHS value is assigned to LHS variable

value >> variable... (substitue variable with its latest values)
value >>  add(10,20) .... 30 ( call the method.. and store the results returned from the method)
value >>  10+25 .... 35 ( solve the expression and store its result)


== comparison.... LHS is equal to RHS


Is 10 equal to 5 = no / false
is 10 greater than 5 = yes/ true


Logical AND = && : compare userid and password in login page
		registd userid == login userid 
			AND 
		registd pwd = login pwd

TRUE and TRUE = TRUE ( 1 and 1 = 1 )
TRUE and FALSE = FALSE ( 1 and 0 = 0)
FALSE and TRUE = FALSE ( 0 and 1 = 0)
FALSE and FALSE = FALSE ( 0 and 0 = 0)


Logical OR = || : forgot password ...
		registered email = forgot password page entered email
			OR
		registered phone = forgot password page entered phone

TRUE or TRUE = TRUE ( 1 or 1 = 1)
TRUE or FALSE = TRUE ( 1 or 0 = 1 )
FALSE or TRUE = TRUE ( 0 or 1 = 1)
FALSE or FALSE = FALSE ( 0 or 0= 0)

exclusive or
1 ^ 1 = 0
0 ^ 0 = 0
1 ^ 0 = 1
0 ^ 1 = 1


Operators		LHS input			RHS input			Output

Arithmetic		numeric			numeric			numeric  ( 1+2	  : 3)
Equality		object/numeric		object/numeric		boolean  ( 1==2 : false)
Relational		numeric			numeric			boolean  ( 1<2)   : true)
unary 				numeric					numeric  ( 1++ : 2)
conditional	boolean			boolean			boolean   ( true && true : true)
			(equality/relational)  (equality/relational)
bitwise		numeric			numeric			numeric   ( 10 &  5 : 0 )

bit = 1 and 0

int a=10;
int b=20;

conditional or = ||

a == b || b > a

1) 10==20 || 20>10
2) FALSE || TRUE
3) TRUE

Operator precedence (priority)
1) bracket ()
2) * / % 
3) + -
4) relational > <
5) equality ==
6) &&
7) ||
if you have more than 1 operator in same level = process left to right

10+20 *4 / (10-2)
10 + 20 * 4 / 8
10 + 80 / 8
10 + 10
20

(10+20) == (6 * 5) &&  (10-3) > ( 20/10)
 30 == (6 * 5) &&  (10-3) > ( 20/10)
 30 == 30 &&  (10-3) > ( 20/10)
 30 == 30 &&  7 > ( 20/10)
 30 == 30 &&  7 > 2
 30 == 30 &&  true
 true &&  true
 true
 
 
 
 ****************** Control flow ******************* 
 
 Either or : If - Else
 Multiple choice OPTIONs : switch case and if-else-if
 Loop : while, do-while, for
 
 ATM software{
 
	balance = 10000;
	atmPin = 1234;
	transaction(){
		please enter your pin
		IF ( entered pin == registered atm pin )
		{
			welcome to bank
			transaction LOOP
					OPTION: deposit
							balance = balance + deposit amount
					OPTION: withdraw
						IF ( balance > withdraw amount)
							balance = balance - withdraw amount
						ELSE
							insufficient fund in account to withdraw
					OPTION: checkBalance
						your bank balance is 10000
						
			do you wish to perform another transaction
				yes
				
			LOOP BACK	
		}
		ELSE 
			invalid pin
		
		thank you for using our bank
	}
	
 }
 
 transaction(){
		please enter your pin
		welcome to bank
		invalid pin
		balance = balance + deposit amount
		balance = balance - withdraw amount
		insufficient fund in account to withdraw
		your bank balance is 10000
		thank you for using our bank
	}
 
Program
	Variable(HAS-A)
	int balance=1000;
	
	processTransaction()
	Method(DOES-A){
		
		ALGORITHM/LOGIC
			Operators and Control Flow
		if(pin matches, reg pin == entered pin)
			welcome
		else
			invalid pin, please try again later
	}
	
	
	
	
	bankloan
		if(amount > 1000000)
			loan denied
		if(creditscore < 700)
			loan denied
		else
			loan approved


Loop = repetetive task/code

FOR = fixed loop
WHILE = 0 or more loop
DO-WHILE = 1 or more loop

Theater booking
	50 seats
	can use for loop... to book 50 seats exctly
		
Shopping
	add2Cart
	can use while loop.. we can have 0 or more items to add in cart
	
ATM
	1 transaction is guaranteed...
	can use do-while loop.... 

I = numeric data type initilzed
C = operator with boolean output (relational operator)
M = numeric operator + - * / ++ --
for( I , C , M){
	asdad
	asda
	da
	dasd
}
for( int x=0; x>10 ; x--)

I C RC
M C RC
M C RC

for(   int i=0; i<3   ; i++   ){
	sysout("hi");
	// repeat code
}
I C RC    : i=0 , i <3 - 0<3 - true , print hi
M C RC   : i=1,  i< 3 - 1<3 - true , print hi
M C RC   : i=2,  i<3  - 2<3 - true , print hi
M C RC   : i=3,  i<3  - 3<3 - false (EXIT loop)
M C RC   : 


for(   int i=0; i>3   ; i++   ){
	sysout("hi");
	// repeat code
}
I C RC    :  i=0, i>3 - 0>3 - false (EXIT loop)
M C RC   : 


i=i+2
i=2+2
i=4

for(   int i=0; i<5   ; i=i+2   ){
	sysout("hi");
	// repeat code
}
I C RC    :  i=0, i<5 - 0<5 - true, print hi
M C RC   :  i=2, i<5 - 2<5 - true, print hi
M C RC   :  i=4, i<5 - 4<5 - true, print hi
M C RC   :  i=6, i<5 - 6<5 - false(EXIT LOOP)


Continue = skip all the line in current loop and CONTINUES with next loop
Break = exit loop

for(   int i=0; i<4   ; i++ ){
	sysout("hi");
	if(i==2)
		continue;
	sysout("bye");
}
I C RC    :  i=0, i<4 - 0<4 - true, print hi print bye
M C RC   :  i=1, i<4 - 1<4 - true, print hi print bye
M C RC   :  i=2, i<4 - 2<4 - true, print hi "execute continue" skip print bye
M C RC   :  i=3, i<4 - 3<4 - true, print hi print bye
M C RC   :  i=4, i<4 - 4<4 - false, EXIT LOOP




for(   int i=0; i<4   ; i++ ){
	sysout("hi");
	if(i==2)
		break;
	sysout("bye");
}
I C RC    :  i=0, i<4 - 0<4 - true, print hi print bye
M C RC   :  i=1, i<4 - 1<4 - true, print hi print bye
M C RC   :  i=2, i<4 - 2<4 - true, print hi "execute break" EXIT LOOP
M C RC   : 
M C RC   : 

Fixed loop
starting point = with i as 0
ending point = as long as i is less than 4.. when i is equal to 4 exit
for(   int i=0; i<4   ; i++ )


Condition - boolean variable, boolean value or boolean output operator
while( condition ){
	Repeat code
}

boolean a=false
while( a ){ // while(false)
	Repeat code
}

do{
	// repeat code
}while(a);


if else if else if.... for ... while... do-while

int option=3;
if(option==1)
	sysout("withdraw");
else if(option==2)
	sysout("deposit");
else if(option==3)
	sysout("balance check");
else 
	sysout("invalid option");

multi option
if-else-if
	if complex operator check
switch case (performance better)
	if checking primitive data type
		or string values
	
	
CHOOSE if-else-if
	when requires complex multiple
	condition
if(userid==regUserid && pwd==regPwd)
	sysout("login success");
else if(compare email && password)
	sysout("login success");
else if(compare phone && password)
	sysout("login success");
else 
	sysout("login failure");


CHOOSE switch case
	for simple value comparison 
	against primitive or string data type
int option=555;
switch(option){
	case 1:
		sysout("withdraw");
		break;
	case 555:
		sysout("deposit");
		break;
	case 100000:
		sysout("balance check");
		break;
	default
		sysout("invalid option");
		break;
}



********** inheritance
Parent > Child
Super > Sub


super(); // call parent constructor
super.sub(10,20); // call parent's method sub
super.x // access parent's variable x

Program is made of
	Constructor
	global variable
	method
	
	
int a=10;
int b =20;
a=b;
Student s1=new Student();
Student s2=new Student();
s1=s2;



equal assignment operator NEW RULES

LHS=RHS
RHS can be same data type OR child/sub data type of RHS


Parent p =new Parent();
Parent p=new Child();
RHS can be child/sub of LHS
access to variable and Methods are restricted to LHS data type



Method NEW RULES

method requires X data type... you can pass any variable of type X of sub of X

Iphone i=new IphoneX();
Iphone i2=new Iphone();
IphoneX ix=new IphoneX();
Iphone14 i14=new Iphone14();
photo( i  );  // photo requires Iphone Data type, i happens to be Iphone data type
photo( ix  ); // photo requires Iphone Data type, ix happnes to be Child/sub of Iphone data type 
photo( i14);

// runtime polymorphism... Future proof program
// this method will work with anu iphone from the past
// current , as well as ready to be used by any iphone model that comes in future
public void photoI(Iphone i){
	i.takePictures();
}


Payment  	> CreditPaymnet 
		> DebitPayment
		> cashPayment
		> cryptoPayment
CreditPayment cp=new CreditPayment();
DebitPayment dp=new DebitPayment();
cashPayment cap=new cashPayment();
cryptoPayment crp=new cryptoPayment();
sysout(press 1 for credit, 2 for debit and 3 for cash payment)
if(option==1)
	checkOut(cp);
else if(option==2)
	checkOut(dp);
else if (option==3)
	checkOut(cap);
else if (option==4)
	checkOut(crp);

public void checkOut( Paymnet p){
	p.process();
	p.chargeAmount();
}



Compiletime polymorphism - Overloaded
	you can resolve conflict without running program.. based upon the input..
	how to implement
		1) method name should be same
		2) input should be different
		3) can have multiple methods with same name in 
			child-parent 
			just child 
			just parent

Runtime polymorphism - Overriding
	you can resolve conflict when running program.. based upon the input datatype respective
		method is called..
	how to implement
		1) method name should be same
		2) input should be same
		3) can have multiple methods with same name in 
			child-parent 


Interface : 

	Login : john. jane mike andy
		john
		john1!
	
	Interface - agreeement... 
	
	Profile : display profile



sub-super class - inherit from 2 parents - ?
	if both parents have same method with different logic
		child is confused
	
	
// idea of smartphone	 
interface IIphone (forward looking prgram) backward compatibility support= default methods
	call();
	text();
	browseInternet();
	camera(){
		sdfsdf
	}
	
Iphone implements IIphone
	call()
		adadasd
	text()
		asdsadasd
	browseInternet()
		sdasdsad
	
Iphone5 extends Iphone 
	fingerScan()
		asdads
	
IphoneX extends Iphone5
	faceScan()
		asdad
		
Iphone13 extends IphoneX
	applePay()
		asdadsad
	
	
Interface has support for multiple inheritance = bcos parents have no method logic/body.. so no confusion
backward compatibility = default methods... has method logic/body
		conflicting/confusing default method from 2 parents = OVERRIDE mandatory in child

	
	
	
Interface = 100% incomplete
Abstract class = partially complete program
Concrete class = 100% complete

Abstract class - Generalization/common
	partial complete program = some complete methods and some
						incomplete methods
		

Flexibility - changes to exisiting code
New features - collectContactInfo

// contains 2 incomplete method
IPayment = ***incomplete program***
	public void collectShippingAddress();
	public void processpayment();
	public void collectContactInfo();

// 1 complete "collectShipp" and 1 incomplete method "propay"
abstract AbPayment implements Ipayment (abstract/incomplete version of IPayment)
// inherited 2 abstract/incomplete methods
	// implemented one of the abstract methods
	collectShippingAddress
		take street city and zip etc
	collectContactInfo
		collect email ad phone

CreditCardPay extends AbPayment 
	processpayment
		collect credit card info
	
DebitCardPay extends AbPayment 
	processpayment
		collect debit card info
	
			
PaypalCardPay extends AbPayment 
	processpayment
		paypal userid pwd
	
			
CryptoPay extends AbPayment 
	processpayment
		crypto wallet
							
************** access privi *****

package - group or categorize programs.. Organize code 

com.amazon.www.login
	login.java
	register.java
	changepwd.java
	profile.java
	
com.amazon.www.browse
	shopping.java
	add2Cart.java

com.amazon.www.checkOut
	payment.java
	checkout.java


programs communicate/connected each other

HAS-A = composition (create references to other program)
IS-A = inheritance ( extends, implements other program)


public class Car{
	Engine e=new Engine(); // Car HAS-A Engine
}

public class Engine{
}


public class Phone{
	make call(){}
	text(){}
}
			SmartPhone IS-A Phone
public class SmartPhone extends Phone{
	browse();
}

If program you are seeking either for (IS-A or HAS-A)	
belongs to different package... then import statement is required.

ACCESS Privilege
package Group1
	Parent : int a=10; add(int a, int b)
	Child1 IS-A(extends) Parent
	Other1 HAS-A(refere) Parent

package Group2
	Child2 IS-A(extends) Parent (require import parent)
	Other2 HAS-A(refere) Parent (require import parent)
	
1) public level access = EVERYONE access
2) default or package level access
	Parent
		int b;
	ANY program in same package as Parent  = Child1 and Other1 

3) protected level access	
	Parent
		Protected int c;
	ANY program in same package as Parent  = Child1 and Other1 
	ANY program with IS-A from other package = Child2
		// everyone except Other2
4) private level access
	Parent
		private int d;


************* CONSTRUCTOR AS PRIVATE - ISOLATES THE PROGRAM FROM ANY CONNECTION ******

bankAccount
	money HAS-A
	accountnumber HAS-A
	withdraw DOES
	deposit DOES
	savingAccount IS-A 
	creditAccount IS-A
	name HAS-A
	addres HAS-A
	
public BankAccount{
	int money;
	AccountNumber acctNum;
	withdraw(){
	
	}
	deposit(){
		
	}
}
public SavingAccount extends BankAccount{
	int interst;
}
public CreditAccount extends BankAccount[
	int interest;
	int creditLimit;
}



payment
guestLogin
phonePasscode
creditCard
Crypto
login


payment IS-A creditcard - NOT all payment are creditcard payment
creditcard IS-A payment - public class CreditCard extends Payment
Login IS-A creditCard



car
wheel
nissan
toyota
engine


car is-a wheel
car has-a wheel - Y
wheel is-a car
wheel has-a car

public class Car{
	Wheel w=new Wheel(); // HAS-A
}

car is-a nissan
car has-a nissan
nissan is-a car - Y 
nissan has-a car

public class nissan extends Car{
	
}



Complete Test 2 and 3 by end of 05/31. Use the same name as Test1.
	Test 2 = algorithm or logic
	Scope/Operator/Controlflow				
	https://kahoot.it/challenge/06426191?challenge-id=d26c8f8e-a26b-40d4-a21f-fc80d3720d98_1653661524877
	pin-06426191
	
	Test 3 = design level
	constructor-inheritance-polymor-access-final
	https://kahoot.it/challenge/0636513?challenge-id=d26c8f8e-a26b-40d4-a21f-fc80d3720d98_1653661584449
	pin-0636513
	
Test4
static-array, exception,thread,String,collection

good coding practice

ICar = Interface
AbPhone = Abstract
bankAccount() = method
customerName = variable
Bank = class



int a;
String x;




public class Amazon{
	public static void main(String[] args) {		
		
	}
}

Cannot "launch s/w" Amazon without "creating reference" of Amazon program
Cannot "create reference" of Amazon program without "launching s/w"Amazon

launch s/w by directly calling main method WITHOUT creating reference
Amazon.main


cus1 and cus2 = variable, reference variable, instance of AmazonCustmer
AmazonCustomer cus1; // cus1 is DECLARED
AmazonCustomer cus2=new AmazonCustomer(); // cus2 is INITALIZED/INSTANTIATED
				// instances/copy 

a and b= variable
int a; // a is DECLARED
int b=20;// b is INITIALIZED

AmazonCustomer[] allAmzonCust=new AmazonCustomer[5];
Array declaration : DECLARED 5 AmazonCustomer variables
AmazonCustomer  allAmzonCust[0]; 
allAmzonCust[0]=new AmazonCustomer();
AmazonCustomer  allAmzonCust[1];
AmazonCustomer  allAmzonCust[2];
AmazonCustomer  allAmzonCust[3];
AmazonCustomer  allAmzonCust[4];

AmazonCustomer cus1; 
AmazonCustomer  allAmzonCust[0]; 

cus1=new AmazonCustomer();
allAmzonCust[0]=new AmazonCustomer();

AmazonCustomer cus2;  
AmazonCustomer cus3; 
AmazonCustomer cus4; 
AmazonCustomer cus5; 
AmazonCustomer cus10000000=new AmazonCustomer (); 

// 1 billion AmazonCustomer =declared and initialized/instantiated
AmazonCustomer[] allAmzonCust=new AmazonCustomer[10000000];
for( int i=0;i<allAmzonCust.size();i++)
	allAmzonCust[i]=new AmazonCustomer();
	
	
	allAmzonCust[0]=new AmazonCustomer();
	allAmzonCust[1]=new AmazonCustomer();
	allAmzonCust[99999999]=new AmazonCustomer();
	
	
	
************** Exception handling ****************

Exception handling provides Programs with ability to recover/take actions
in the event of a failure

Developers - Why Where What
	Need the insight on where / what caused the failure
	Need ability to provide series of steps to fix the problems
	
Customers :
	Customer need not be shown a technical error message in the event of failure
	need to provide a simple error message or instructions that could be used to
	take appropriate actions to fix the failure.

EXCEPTION - coding/programming/software problem
	int a=100/0; // bad program code... software mistake
	// any number divided by 0 = infinity
	// short 32,767.. byte 127, int 2 billion, long trillions
	// NO java data type can store INFINITE number

ERROR - hardware problem
	facebook = 2 billion customer X 1000 pictures and post and messages X MB,GB
		2 billion X 10GB
	8GB ram = insufficient hardware capacity to run FB software from this laptop
	
Program failure Category :
	Exception : programming mistake , logical flaw in programming. these can be easily recovered.
	Error : SEVERE. cannot recover. 
	
Exception program heirarchy

Exception handling blocks
try = 
catch
finally 

try catch
try finally
try catch finally
try catch catch
try catch catch finally




multiple catch blocks
ATM
	try{
		swipe your card...
		please enter 4 digit pin...  
		enter withdraw amount... 
	}
	catch(CardCannotReadException cc){
		sysout( "please dial 1800-java-bank request for new card");
	}
	catch(MisMatchPin e){
		sysout( "please enter proper 4 digit pin");
	}
	catch(InsufficientFund e){
		sysout( "please enter withdraw amount below the balance");
	}
	finallY{
		sysout("thank you for using java bank");
	}
	
	
try-catch = way to handle the potential failure YOURSELF
throws = way to let SOMEONE ELSE handle the failure
	Program/line that calls this method

WHAT, WHERE, HOW : printStackTrace() method
tracing path on how where you arrived before the program crash/issue

	Exception in thread "main" java.lang.ArithmeticException: / by zero **** WHAT *****
		at exception.Test.method3(Test.java:13)  ****** WHERE ******
		at exception.Test.method2(Test.java:9)
		at exception.Test.method1(Test.java:5)
		at exception.ExceptionTest2.main(ExceptionTest2.java:8) ***** HOW *****

Compile time exception and runtime exception


NullPointerException

Exception handling 
	handle yourself  = try/catch combo in your code where there is potential exception/failure
	let someone else handle it = throws ... whoever calls my method , they are required
				to handle it.



User defined exceptions
program might HAVE TO fail because of Business limitations

// int range = from -2 billion to +2billion
int bankBalance=100;
int withdrawAmount=200;

bankBalance=bankBalance-withdrawAmount;
100-200=   -100
NO TECHNICAL LIMITATION
but BANK BUSINESS DOES NOT WANT TO ALLOW
NEGATIVE NUMBER IN BANK BALANCE




class Telecom{
	public void call(int phone){
		code to make a call
	}
}

Telecom t=new Telecom();
t.call(0);

int phone=0; // NO technical problem
		     // Business related problem



public class Bank{
	int balance=100; // supports + 2 billion to - 2 billion
					withAmount=1000000
	public void withdraw(int withAmount){
		balance=100-1000000, balance=-999900
		balance=balance-withAmount
	}
}

Bank cust1=new bank();
cust1.withdraw(1000000);// NO techical problem in storing -999k in balance variable


**************** String ***********

STRING IS OBJECT/REFERENCE DATA TYPE

Primitive data type
	int age=25; // literal values
	String name="john"; 
	
Object data type
	Student stu=new Student(); // reference values
	String name=new String("john");

String pool
String is Immutable(unchangeable) object : multiple variables share the same object
	String x="john";
	x="jane"; // it is allowed.. VARIABLE is not immutable but OBJECT created in memory is 
						immutable
	
Mutation = change
Immutable = unchangeable

String and Int most widely used data type


Javatrainer
javatrainer



************ Threads ***********

Customer and Apple Store owner

waiting 
	Staff : Whenever the new Iphone batch arrive i will notify/call you.
timed-waiting
	Staff : Please come-in on Sunday. and we will hve your iphone ready.


forecefully terminated = stop(). didnt complete its job
gracefully terminated = reach the end of run() method.. when thread completes its job



Thread 1= take customer Order
Thread 2= Process Payment
Thread 3= shipping
Thread 4= shopping


Thread2.join();

join - caller program will wait until the other thread has finished its job

class Shipping{

	processPay.join();
}
Shipping will wait until the process payment thread has finished its job

*************** collection ****************

